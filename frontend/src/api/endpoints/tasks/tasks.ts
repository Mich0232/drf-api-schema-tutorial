/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Your Project API
 * Your project description
 * OpenAPI spec version: 1.0.0
 */
import * as axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse } from 'axios';
import type { PatchedTask, Task } from '../yourProjectAPI.schemas';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? A : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object ? NonReadonly<NonNullable<T[P]>> : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

export const tasksList = <TData = AxiosResponse<Task[]>>(options?: AxiosRequestConfig): Promise<TData> => {
  return axios.default.get(`/api/tasks/`, options);
};
export const tasksCreate = <TData = AxiosResponse<Task>>(
  task: NonReadonly<Task>,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.post(`/api/tasks/`, task, options);
};
export const tasksRetrieve = <TData = AxiosResponse<Task>>(
  id: number,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.get(`/api/tasks/${id}/`, options);
};
export const tasksUpdate = <TData = AxiosResponse<Task>>(
  id: number,
  task: NonReadonly<Task>,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.put(`/api/tasks/${id}/`, task, options);
};
export const tasksPartialUpdate = <TData = AxiosResponse<Task>>(
  id: number,
  patchedTask: NonReadonly<PatchedTask>,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.patch(`/api/tasks/${id}/`, patchedTask, options);
};
export const tasksDestroy = <TData = AxiosResponse<void>>(id: number, options?: AxiosRequestConfig): Promise<TData> => {
  return axios.default.delete(`/api/tasks/${id}/`, options);
};
export type TasksListResult = AxiosResponse<Task[]>;
export type TasksCreateResult = AxiosResponse<Task>;
export type TasksRetrieveResult = AxiosResponse<Task>;
export type TasksUpdateResult = AxiosResponse<Task>;
export type TasksPartialUpdateResult = AxiosResponse<Task>;
export type TasksDestroyResult = AxiosResponse<void>;
